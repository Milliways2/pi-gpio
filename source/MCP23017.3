.\" Automatically generated by Pandoc 2.14.1
.\"
.TH "MCP23017" "3" "3 Sept 2022" "MCP23017 1.0" ""
.hy
.SH NAME
.PP
GPIO for MCP23017 16-Bit I/O Expander
.SH SYNOPSIS
.PP
#include <pi-gpio.h>
.PD 0
.P
.PD
#include <MCP23017.h>
.PP
gcc -Wall -o prog prog.c -lpi-gpio
.SH DESCRIPTION
.PP
.PD 0
.P
.PD
.PD 0
.P
.PD
GPIO access routines for MCP23017 16-Bit I/O Expander connected on
I\[S2]C
.PD 0
.P
.PD
Allows access by individual \f[I]pin\f[R], \f[I]port\f[R] (8 bit) or
\f[I]device\f[R] (16 bit)
.PD 0
.P
.PD
NOTE default I\[S2]C is slow (100kHz); the speed can be increased to
400kHz
.PD 0
.P
.PD
\f[B]dtparam=i2c_arm=on,i2c_baudrate=400000\f[R]
.SS Features
.PP
-------
.PD 0
.P
.PD
.PP
.PD 0
.P
.PD
.PD 0
.P
.PD
.SH OVERVIEW
.PP
.PD 0
.P
.PD
.SS Expanded GPIO
.PP
Expanded GPIO module
.PP
setup_egpio - Set single gpio channel as an input or an output
.PP
output_egpio - Output to a GPIO channel
.PP
input_egpio - Returns the GPIO level
.PP
setup_egpio_port - Set all channel on specified port
.PP
setup_egpio_port_pud - Set pull on specified port
.PP
output_egpio_port - Output to all channel on specified port
.PP
input_egpio_port - Returns the GPIO level
.PP
setup_egpio_dev - Set all channels
.PP
setup_egpio_dev_pud - Set pull on all channels
.PP
output_egpio_dev - Output to all channel
.PP
input_egpio_dev - Returns the GPIO level
.PP
.PD 0
.P
.PD
.PP
--------
.PD 0
.P
.PD
.SS Expanded GPIO
.SH VARIABLES
.TP
\f[B]int ehand\f[R] - Identify MCP23017 16-Bit I/O Expander on I\[S2]C bus
ehand MUST be set by calling program e.g.\ i2cOpen() before calling
these functions
.TP
# FUNCTIONS
All functions return -1 on error
.SS BIT Operations
.PP
\f[B]int setup_egpio(int gpio, int port, int direction, int pud)\f[R] -
Set single gpio channel as an input or an output
.PD 0
.P
.PD
\f[I]gpio\f[R]: 0-7
.PD 0
.P
.PD
\f[I]port\f[R]: 0 (port A) or 1 (port B)
.PD 0
.P
.PD
\f[I]direction\f[R]: 0=IN, 1=OUT
.PD 0
.P
.PD
\f[I]pud\f[R]: 0=None 1=Up
.PP
\f[B]int output_egpio(int gpio, int port, int value)\f[R] - Output to a
GPIO channel
.PD 0
.P
.PD
\f[I]gpio\f[R]: 0-7
.PD 0
.P
.PD
\f[I]port\f[R]: 0 (port A) or 1 (port B)
.PD 0
.P
.PD
\f[I]value\f[R]: - 0/1 or False/True or LOW/HIGH
.PP
\f[B]int input_egpio(int gpio, int port)\f[R] - Returns the GPIO level
.PD 0
.P
.PD
\f[I]gpio\f[R]: 0-7
.PD 0
.P
.PD
\f[I]port\f[R]: 0 (port A) or 1 (port B)
.PP
\f[I]Returns\f[R]: HIGH=1 or LOW=0 or -1 on error
.SS PORT Operations
.PP
\f[B]int setup_egpio_port(unsigned port, unsigned dirreg)\f[R] - Set all
channel on specified port
.PD 0
.P
.PD
\f[I]port\f[R]: 0 (port A) or 1 (port B)
.PD 0
.P
.PD
\f[I]dirreg\f[R]: 8 bit mask to set 0=IN, 1=OUT
.PP
\f[B]int setup_egpio_port_pud(unsigned port, unsigned pudreg)\f[R] - Set
pull on specified port
.PD 0
.P
.PD
\f[I]port\f[R]: 0 (port A) or 1 (port B)
.PD 0
.P
.PD
\f[I]pudreg\f[R]: 8 bit mask to set pull 0=None 1=Up
.PP
\f[B]int output_egpio_port(unsigned port, unsigned datreg)\f[R] - Output
to all channel on specified port
.PD 0
.P
.PD
\f[I]port\f[R]: 0 (port A) or 1 (port B)
.PD 0
.P
.PD
\f[I]datreg\f[R]: 8 bit mask to set 0/1
.PP
\f[B]int input_egpio_port(unsigned port)\f[R] - Returns the GPIO level
.PD 0
.P
.PD
\f[I]port\f[R]: 0 (port A) or 1 (port B)
.PP
\f[I]Returns\f[R]: 8 bit levels or -1 on error
.SS DEVICE Operations
.PP
\f[B]int setup_egpio_dev(unsigned dirreg)\f[R] - Set all channels
.PD 0
.P
.PD
\f[I]dirreg\f[R]: 16 bit mask to set 0=IN, 1=OUT
.PP
\f[B]int setup_egpio_dev_pud(unsigned pudreg)\f[R] - Set pull on all
channels
.PD 0
.P
.PD
\f[I]pudreg\f[R]: 16 bit mask to set pull 0=None 1=Up
.PP
\f[B]int output_egpio_dev(unsigned datreg\f[R]) - Output to all channel
.PD 0
.P
.PD
\f[I]datreg\f[R] - 16 bit mask to set 0/1
.PP
\f[B]int input_egpio_dev()\f[R] - Returns the GPIO level
.PD 0
.P
.PD
\f[I]Returns\f[R]: 16 bit levels or -1 on error
.SH AUTHORS
Ian Binnie (Milliways).
