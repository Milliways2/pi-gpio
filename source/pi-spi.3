.\" Automatically generated by Pandoc 2.14.1
.\"
.TH "pi-spi" "3" "11 Mar 2025" "pi-spi 1.0" ""
.hy
.SH NAME
.PP
pi-spi - A SPI C library for Raspberry Pi.
.SH SYNOPSIS
.PP
#include <pi-spi.h>
.PP
gcc -Wall -o prog prog.c -lpi-spi
.SH DESCRIPTION
.PP
.PD 0
.P
.PD
.PD 0
.P
.PD
\f[B]pi-spi\f[R] is a SPI C library for Raspberry Pi using kernel
drivers
.SH OVERVIEW
.PP
.PD 0
.P
.PD
.SS SPI
.PP
spiOpen - Initialise a SPI channel
.PP
spiDataRW2 - Write and Read a block of data over the SPI bus
.PP
spiDataRW - Write and Read a block of data over the SPI bus
.PP
.PD 0
.P
.PD
.SH FUNCTIONS
.PP
.PD 0
.P
.PD
.SS SPI
.TP
SPI module using the \f[I]spidev\f[R] kernel driver
SPI MUST be enabled BEFORE using this code (see spiOpen for detail)
.TP
\f[B]int spiOpen(unsigned controller, unsigned channel, unsigned speed, unsigned mode)\f[R] - Initialise a SPI channel
Raspberry Pi Zero, 1, 2 and 3 have three SPI controllers
.PD 0
.P
.PD
\f[B]SPI0\f[R], with 2 hardware chip selects, is available on all
Raspberry Pis
.PD 0
.P
.PD
To enable SPI0 use \f[I]raspi-config\f[R], or ensure the line
\f[I]dtparam=spi=on\f[R] is not commented out in
\f[I]/boot/config.txt\f[R]
.PD 0
.P
.PD
By default it uses 2 chip select lines, but this can be reduced to 1
using \f[I]dtoverlay=spi0-1cs\f[R]
.PD 0
.P
.PD
\f[B]SPI1\f[R], with 3 hardware chip selects, is available on all
Raspberry Pis with 40 pin header
mode 1,3 do not work!
.PD 0
.P
.PD
To enable SPI1 with 1, 2 or 3 chip select lines add to the
\f[I]/boot/config.txt\f[R] file
.PD 0
.P
.PD
\f[I]dtoverlay=spi1-1cs\f[R] #1 chip select
.PD 0
.P
.PD
\f[I]dtoverlay=spi1-2cs\f[R] #2 chip select
.PD 0
.P
.PD
\f[I]dtoverlay=spi1-3cs\f[R] #3 chip select
.PD 0
.P
.PD
\f[B]SPI2\f[R], also with 3 hardware chip selects, is only available on
Compute Module 1, 3 and 3+
.PD 0
.P
.PD
On the Raspberry Pi 4, 400 and Compute Module 4 there are 4 additional
SPI buses:
.PD 0
.P
.PD
SPI3 to SPI6, each with 2 hardware chip selects
.PP
\f[I]controller\f[R]: - 0-6 (depending on model)
.PD 0
.P
.PD
\f[I]channel\f[R]: - 0-3 (depending on available chip selects)
.PD 0
.P
.PD
\f[I]speed\f[R]: - 500,000 through 32,000,000 - SPI clock speed in bps
.PD 0
.P
.PD
\f[I]mode\f[R]: - 0-3
.PP
\f[I]Returns\f[R] file-descriptor for the device, or -n on error
.TP
\f[B]int spiDataRW2(int channel, unsigned char *tx_data, unsigned char *rx_data, int len)\f[R] - Write and Read a block of data over the SPI bus
Discrete Tx/Rx buffers
.PD 0
.P
.PD
.PP
\f[I]channel\f[R]: - 0-3 (depending on available chip selects)
.PD 0
.P
.PD
\f[I]tx_data\f[R]: pointer to buffer containing transmit data
.PD 0
.P
.PD
\f[I]rx_data\f[R]: pointer to buffer to receive data
.PD 0
.P
.PD
\f[I]len\f[R]: length of buffer
.PP
\f[I]Returns\f[R] result code
.TP
\f[B]int spiDataRW (int channel, unsigned char *data, int len)\f[R] - Write and Read a block of data over the SPI bus
Shared Tx/Rx buffer
.PD 0
.P
.PD
.PP
\f[I]channel\f[R]: - 0-3 (depending on available chip selects)
.PD 0
.P
.PD
\f[I]data\f[R]: pointer to buffer containing transmit data (will be
overwritten by receive data)
.PD 0
.P
.PD
\f[I]len\f[R]: length of buffer
.PP
\f[I]Returns\f[R] result code
.SH AUTHORS
Ian Binnie (Milliways).
