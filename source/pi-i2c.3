.\" Automatically generated by Pandoc 2.14.1
.\"
.TH "pi-i2c" "3" "5 Sept 2022" "pi-i2c 1.0" ""
.hy
.SH NAME
.PP
pi-i2c - Simplified I2C access routines
.SH SYNOPSIS
.PP
#include <pi-i2c.h>
.PP
gcc -Wall -o prog prog.c -lpi-i2c
.SH DESCRIPTION
.PP
.PD 0
.P
.PD
.PD 0
.P
.PD
pi-i2c is an I\[S2]C C library for Raspberry Pi using the I\[S2]C kernel
driver
.PD 0
.P
.PD
.SS Features
.PP
-------
.PD 0
.P
.PD
.PP
.PD 0
.P
.PD
.PD 0
.P
.PD
.SH OVERVIEW
.PP
.PD 0
.P
.PD
.SS I\[S2]C
.PP
i2cOpen - Open I\[S2]C device
.PP
i2cRead - Read a single word (8 bits) from a device, without specifying
a register
.PP
i2cRead8 - Read a single word (8 bits) from register
.PP
i2cRead16 - Read a single word (16 bits) from register
.PP
i2cWrite - Write a single word (8 bits) to a device, without specifying
a register
.PP
i2cWrite8 - Write a single word (8 bits) to the specified register
.PP
i2cWrite16 - Write a single word (16 bits) to the specified register
.PP
.PD 0
.P
.PD
.SH FUNCTIONS
.PP
--------
.PD 0
.P
.PD
.SS I\[S2]C
.TP
I\[S2]C module using the I\[S2]C kernel driver
I\[S2]C MUST be enabled BEFORE using this code (see i2cOpen for detail)
.PP
\f[B]int i2cOpen(unsigned i2cBus, unsigned i2cAddr)\f[R] - Open I\[S2]C
device
.PD 0
.P
.PD
To enable I\[S2]C use \f[I]raspi-config\f[R]
.PD 0
.P
.PD
or ensure the line \f[I]dtparam=i2c_arm=on\f[R] or
\f[I]dtparam=i2c=on\f[R] is not commented out in
\f[I]/boot/config.txt\f[R]
.PD 0
.P
.PD
I\[S2]C can be enabled on the fly with a command e.g.\ \f[I]sudo dtparam
i2c\f[R]
.PD 0
.P
.PD
\f[B]NOTE\f[R] this will NOT return an error if there is no I\[S2]C
device at i2cAddr
.PD 0
.P
.PD
Use \f[I]i2cRead\f[R] etc to check
.PP
\f[I]i2cBus\f[R]: - 0-1
.PD 0
.P
.PD
\f[I]i2cAddr\f[R]: - 0-0x7F
.PP
\f[I]Returns\f[R] handle to the I\[S2]C device, or -1 on error
.PP
\f[B]int i2cRead(unsigned handle)\f[R] - Read a single word from a
device, without specifying a register
.PD 0
.P
.PD
\f[I]handle\f[R]: - handle to the I\[S2]C device
.PP
\f[I]Returns\f[R] word read
.PP
\f[B]int i2cRead8(unsigned handle, unsigned i2cReg)\f[R] - Read a single
word (8 bits) from register
.PD 0
.P
.PD
\f[I]handle\f[R]: - handle to the I\[S2]C device
.PD 0
.P
.PD
\f[I]i2cReg\f[R]: - I\[S2]C register
.PP
\f[I]Returns\f[R] word read
.PP
\f[B]int i2cRead16(unsigned handle, int i2cReg)\f[R] - Read a single
word (16 bits) from register
.PD 0
.P
.PD
\f[I]handle\f[R]: - handle to the I\[S2]C device
.PD 0
.P
.PD
\f[I]i2cReg\f[R]: - I\[S2]C register
.PP
\f[I]Returns\f[R] Word read
.PP
\f[B]int i2cWrite(unsigned handle, int data)\f[R] - Write a single word
(8 bits) to a device, without specifying a register
.PD 0
.P
.PD
\f[I]handle\f[R]: - handle to the I\[S2]C device
.PD 0
.P
.PD
\f[I]data\f[R]: - byte to write
.PP
\f[I]Returns\f[R] result code
.PP
\f[B]int i2cWrite8(unsigned handle, int i2cReg, int value)\f[R] - Write
a single word (8 bits) to the specified register
.PD 0
.P
.PD
\f[I]handle\f[R]: - handle to the I\[S2]C device
.PD 0
.P
.PD
\f[I]i2cReg\f[R]: - I\[S2]C register
.PD 0
.P
.PD
\f[I]data\f[R]: - word to write
.PP
\f[I]Returns\f[R] result code
.PP
\f[B]int i2cWrite16(unsigned handle, int reg, int value)\f[R] - Write a
single word (16 bits) to the specified register
.PD 0
.P
.PD
\f[I]handle\f[R]: - handle to the I\[S2]C device
.PD 0
.P
.PD
\f[I]i2cReg\f[R]: - I\[S2]C register
.PD 0
.P
.PD
\f[I]data\f[R]: - word to write
.PP
\f[I]Returns\f[R] result code
.SH AUTHORS
Ian Binnie (Milliways).
